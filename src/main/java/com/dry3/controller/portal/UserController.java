package com.dry3.controller.portal;import com.dry3.common.Const;import com.dry3.common.ResponseCode;import com.dry3.common.ServerResponse;import com.dry3.pojo.User;import com.dry3.service.IUserService;import org.apache.commons.lang3.StringUtils;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Controller;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestMethod;import org.springframework.web.bind.annotation.ResponseBody;import javax.servlet.http.HttpSession;@Controller@RequestMapping("/user/")public class UserController {    @Autowired    private IUserService iUserService;    /**     * 用户登录     *     * @param username     * @param password     * @param session     * @return     */    @RequestMapping(value = "login.do", method = RequestMethod.POST)    @ResponseBody    public ServerResponse<User> login(String username, String password, HttpSession session) {        //controll->service->dao        if (session.getAttribute(Const.CURRENT_USER) == null) {            ServerResponse<User> response = iUserService.login(username, password);            if (response.isSuccess()) {                session.setAttribute(Const.CURRENT_USER, response.getData());            }            return response;        }        return ServerResponse.createByErrorMessage("已登录用户");    }    /**     * 退出登录     *     * @param session     * @return     */    @RequestMapping(value = "logout.do", method = RequestMethod.POST)    @ResponseBody    public ServerResponse<String> logout(HttpSession session) {        try {            if (session.getAttribute(Const.CURRENT_USER) != null) {                session.removeAttribute(Const.CURRENT_USER);                return ServerResponse.createBySuccessMessage("退出成功");            }            return ServerResponse.createByErrorMessage("当前账户未登录");        } catch (Exception e) {            e.printStackTrace();        }        return ServerResponse.createByErrorMessage("服务端异常");    }    /**     * 用户注册     *     * @param user     * @return     */    @RequestMapping(value = "register.do", method = RequestMethod.POST)    @ResponseBody    public ServerResponse<String> register(User user) {        return iUserService.register(user);    }    /**     * 校验信息     *     * @param str     * @param type     * @return     */    @RequestMapping(value = "check_valid.do", method = RequestMethod.POST)    @ResponseBody    public ServerResponse checkValid(String str, String type) {        return iUserService.checkValid(str, type);    }    /**     * 获取当前登录用户的信息     *     * @param session     * @return     */    @RequestMapping(value = "get_user_info.do", method = RequestMethod.POST)    @ResponseBody    public ServerResponse<User> getUserInfo(HttpSession session) {        User user = (User) session.getAttribute(Const.CURRENT_USER);        if (user == null) {            return ServerResponse.createByErrorMessage("用户没有登录,请登录");        }        return ServerResponse.createBySuccess(user);    }    /**     * 忘记密码--获取账号找回问题     *     * @param username     * @return     */    @RequestMapping(value = "forget_get_question.do", method = RequestMethod.POST)    @ResponseBody    public ServerResponse<String> forgetGetQuestion(String username) {        return iUserService.forgetGetQuestion(username);    }    /**     * 忘记密码--验证用户找回密码答案是否正确     *     * @param username     * @param question     * @param answer     * @return     */    @RequestMapping(value = "forget_check_answer.do", method = RequestMethod.POST)    @ResponseBody    public ServerResponse<String> forgetCheckAnswer(String username, String question, String answer) {        return iUserService.forgetCheckAnswer(username, question, answer);    }    /**     * 忘记密码--设置新的密码     *     * @param username     * @param passwordNew     * @param forgetToken     * @return     */    @RequestMapping(value = "forget_reset_password.do", method = RequestMethod.POST)    @ResponseBody    public ServerResponse forgetResetPassword(String username, String passwordNew, String forgetToken) {        if (StringUtils.isBlank(forgetToken)) {            return ServerResponse.createByErrorMessage("token参数没有传输");        }        return iUserService.forgetResetPassword(username, passwordNew, forgetToken);    }    /**     * 更改密码     *     * @param passwordOld     * @param passwordNew     * @param session     * @return     */    @RequestMapping(value = "reset_password.do", method = RequestMethod.POST)    @ResponseBody    public ServerResponse resetPassword(String passwordOld, String passwordNew, HttpSession session) {        User user = (User) session.getAttribute(Const.CURRENT_USER);        if (user == null) {            return ServerResponse.createByErrorMessage("用户没有登录,请登录");        }        return iUserService.resetPassword(user, passwordOld, passwordNew);    }    @RequestMapping(value = "update_information.do", method = RequestMethod.POST)    @ResponseBody    public ServerResponse updateInformation(HttpSession session, User user) {        User currentUser = (User) session.getAttribute(Const.CURRENT_USER);        if (currentUser == null) {            return ServerResponse.createByErrorMessage("用户没有登录,请登录");        }        user.setId(currentUser.getId());        ServerResponse updateResponse = iUserService.updateInformation(user);        //由于没有更新Username, 为保证session中的user附加Username, 则手动获取添加        User updateUser = (User) updateResponse.getData();        updateUser.setUsername(currentUser.getUsername());        if (updateResponse.isSuccess()) {            session.setAttribute(Const.CURRENT_USER, updateUser);        }        return updateResponse;    }    @RequestMapping(value = "get_information.do", method = RequestMethod.POST)    @ResponseBody    public ServerResponse<User> getInformation(HttpSession session) {        User currentUser = (User) session.getAttribute(Const.CURRENT_USER);        if (currentUser == null) {            return ServerResponse.createByErrorCodeMessage(ResponseCode.NEED_LOGIN.getCode(), "未登录,需要强制登录status=10");        }        return iUserService.getInformation(currentUser.getId());    }}