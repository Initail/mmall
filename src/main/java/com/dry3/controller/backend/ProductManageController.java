package com.dry3.controller.backend;import com.dry3.common.Const;import com.dry3.common.ResponseCode;import com.dry3.common.ServerResponse;import com.dry3.pojo.Product;import com.dry3.pojo.User;import com.dry3.service.IFileService;import com.dry3.service.IProductService;import com.dry3.service.IUserService;import com.dry3.util.PropertiesUtil;import com.dry3.vo.ProductDetailVO;import com.github.pagehelper.PageInfo;import com.google.common.collect.Maps;import com.sun.activation.registries.MailcapFile;import com.sun.activation.registries.MimeTypeFile;import org.apache.commons.lang3.StringUtils;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.http.HttpRequest;import org.springframework.stereotype.Controller;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestParam;import org.springframework.web.bind.annotation.ResponseBody;import org.springframework.web.multipart.MultipartFile;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import javax.servlet.http.HttpSession;import java.util.Map;/** * Created by dry3 */@Controller@RequestMapping("/manage/product")public class ProductManageController {    @Autowired    private IUserService iUserService;    @Autowired    private IProductService iProductService;    @Autowired    private IFileService iFileService;    @RequestMapping(value = "list.do")    @ResponseBody    public ServerResponse<PageInfo> listProduct(HttpSession session, @RequestParam(value = "pageNum", defaultValue = "1") Integer pageNum, @RequestParam(value = "pageSize", defaultValue = "10") Integer pageSize) {        User user = (User) session.getAttribute(Const.CURRENT_USER);        if (user == null) {            return ServerResponse.createByErrorCodeMessage(ResponseCode.NEED_LOGIN.getCode(), "用户未登录,请登录");        }        if (iUserService.checkAdminRole(user).isSuccess()) {            //检验通过            return iProductService.listProduct(pageNum, pageSize);        }        return ServerResponse.createByErrorMessage("非管理员,无权限操作");    }    @RequestMapping(value = "save.do")    @ResponseBody    public ServerResponse saveProduct(HttpSession session, Product product) {        User user = (User) session.getAttribute(Const.CURRENT_USER);        if (user == null) {            return ServerResponse.createByErrorCodeMessage(ResponseCode.NEED_LOGIN.getCode(), "用户未登录,请登录");        }        if (iUserService.checkAdminRole(user).isSuccess()) {            //检验通过            return iProductService.saveOrUpdateProduct(product);        }        return ServerResponse.createByErrorMessage("非管理员,无权限操作");    }    @RequestMapping(value = "setSaleStatus.do")    @ResponseBody    public ServerResponse setSaleStatusProduct(HttpSession session, Integer productId, Integer status) {        User user = (User) session.getAttribute(Const.CURRENT_USER);        if (user == null) {            return ServerResponse.createByErrorCodeMessage(ResponseCode.NEED_LOGIN.getCode(), "用户未登录,请登录");        }        if (iUserService.checkAdminRole(user).isSuccess()) {            return iProductService.setSaleStatusProduct(productId, status);        }        return ServerResponse.createByErrorMessage("非管理员,无权限操作");    }    @RequestMapping(value = "detail.do")    @ResponseBody    public ServerResponse<ProductDetailVO> detailProductById(HttpSession session, Integer productId) {        User user = (User) session.getAttribute(Const.CURRENT_USER);        if (user == null) {            return ServerResponse.createByErrorCodeMessage(ResponseCode.NEED_LOGIN.getCode(), "用户未登录，请登录");        }        if (iUserService.checkAdminRole(user).isSuccess()) {            return iProductService.detailProductById(productId);        }        return ServerResponse.createByErrorMessage("非管理员,无权限操作");    }    @RequestMapping(value = "search.do")    @ResponseBody    public ServerResponse<PageInfo> searchProduct(HttpSession session, Integer productId, String productName,                                                  @RequestParam(value = "pageNum", defaultValue = "1") Integer pageNum,                                                  @RequestParam(value = "pageSize", defaultValue = "10") Integer pageSize) {        User user = (User) session.getAttribute(Const.CURRENT_USER);        if (user == null) {            return ServerResponse.createByErrorCodeMessage(ResponseCode.NEED_LOGIN.getCode(), "用户未登录,请登录");        }        if (iUserService.checkAdminRole(user).isSuccess()) {            //检验通过            return iProductService.searchProduct(productId, productName, pageNum, pageSize);        }        return ServerResponse.createByErrorMessage("非管理员,无权限操作");    }    @RequestMapping(value = "upload.do")    @ResponseBody    public ServerResponse<Map> uploadProduct(HttpSession session, HttpServletRequest request,                                             @RequestParam(value = "upload_file", required = false) MultipartFile file) {        User user = (User) session.getAttribute(Const.CURRENT_USER);        if (user == null) {            return ServerResponse.createByErrorCodeMessage(ResponseCode.NEED_LOGIN.getCode(), "用户未登录,请登录");        }        if (iUserService.checkAdminRole(user).isSuccess()) {            String path = request.getSession().getServletContext().getRealPath("upload");            String targetFileName = iFileService.upload(file, path);            if (StringUtils.isBlank(targetFileName)) {                return ServerResponse.createByErrorMessage("上传失败");            }            String url = PropertiesUtil.getProperty("ftp.server.http.prefix") + targetFileName;            Map fileMap = Maps.newHashMap();            fileMap.put("uri", targetFileName);            fileMap.put("url", url);            return ServerResponse.createBySuccess(fileMap);        }        return ServerResponse.createByErrorMessage("非管理员,无权限操作");    }    @RequestMapping(value = "richText_img_upload.do")    @ResponseBody    public Map richTextImgUpload(HttpSession session, HttpServletRequest request, HttpServletResponse response,                                 @RequestParam(value = "upload_file", required = false) MultipartFile file) {        Map uploadMap = Maps.newHashMap();        User user = (User) session.getAttribute(Const.CURRENT_USER);        if (user == null) {            uploadMap.put("success", false);            uploadMap.put("msg", "请登录账号");            return uploadMap;        }        if (iUserService.checkAdminRole(user).isSuccess()) {            String path = request.getSession().getServletContext().getRealPath("upload");            String targetFileName = iFileService.upload(file, path);            if (StringUtils.isBlank(targetFileName)) {                uploadMap.put("success", false);                uploadMap.put("msg", "上传失败");                return uploadMap;            }            String url = PropertiesUtil.getProperty("ftp.server.http.prefix") + targetFileName;            uploadMap.put("success", true);            uploadMap.put("msg", "上传成功");            uploadMap.put("file_path", url);            //需要按规范修改请求头            response.addHeader("Access-Control-Allow-Headers", "X-File-Name");            return uploadMap;        }        uploadMap.put("success", false);        uploadMap.put("msg", "该账号无权限操作");        return uploadMap;    }}