package com.dry3.service.Impl;import com.dry3.common.ResponseCode;import com.dry3.common.ServerResponse;import com.dry3.dao.CategoryMapper;import com.dry3.dao.ProductMapper;import com.dry3.pojo.Category;import com.dry3.pojo.Product;import com.dry3.service.IProductService;import com.dry3.util.DateTimeUtil;import com.dry3.util.PropertiesUtil;import com.dry3.vo.ProductDetailVO;import com.dry3.vo.ProductListVo;import com.github.pagehelper.Page;import com.github.pagehelper.PageHelper;import com.github.pagehelper.PageInfo;import com.google.common.collect.Lists;import org.apache.commons.lang3.StringUtils;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import java.util.ArrayList;import java.util.List;/** * Created by dry3 */@Service("iProductService")public class ProductServiceImpl implements IProductService {    @Autowired    private ProductMapper productMapper;    @Autowired    private CategoryMapper categoryMapper;    public ServerResponse<String> saveOrUpdateProduct(Product product) {        if (product != null) {            if (StringUtils.isNotBlank(product.getSubImages())) {                String[] subImageArray = product.getSubImages().split(",");                if (subImageArray.length > 0) {                    product.setMainImage(subImageArray[0]);                }            }            if (product.getId() != null) {                int rowResult = productMapper.updateByPrimaryKey(product);                if (rowResult > 0) {                    return ServerResponse.createBySuccessMessage("更新产品成功");                }                return ServerResponse.createByErrorMessage("更新产品失败");            } else {                int rowResult = productMapper.insert(product);                if (rowResult > 0) {                    return ServerResponse.createBySuccessMessage("添加产品成功");                }                return ServerResponse.createByErrorMessage("添加产品失败");            }        }        return ServerResponse.createByErrorMessage("新增或更新产品不正确");    }    public ServerResponse<String> setSaleStatusProduct(Integer productId, Integer status) {        if (productId == null || status == null) {            return ServerResponse.createByErrorCodeMessage(ResponseCode.ILLEGAL_ARGUMENT.getCode(), ResponseCode.ILLEGAL_ARGUMENT.getDesc());        }        Product product = new Product();        product.setId(productId);        product.setStatus(status);        int rowCount = productMapper.updateByPrimaryKey(product);        if (rowCount > 0) {            return ServerResponse.createBySuccessMessage("修改产品状态成功");        }        return ServerResponse.createByErrorMessage("修改产品状态失败");    }    public ServerResponse<PageInfo> listProduct(Integer pageNum, Integer pageSize) {        PageHelper.startPage(pageNum, pageSize);        List<Product> productList = productMapper.listProduct();        List<ProductListVo> productListVos = Lists.newArrayList();        for (Product productItem : productList) {            ProductListVo productListVo = assembleProductListVo(productItem);            productListVos.add(productListVo);        }        PageInfo pageInfo = new PageInfo(productListVos);        pageInfo.setList(productListVos);        return ServerResponse.createBySuccess(pageInfo);    }    //pojo -> vo (value object)    private ProductListVo assembleProductListVo(Product product) {        ProductListVo productListVo = new ProductListVo();        productListVo.setCategoryId(product.getCategoryId());        productListVo.setId(product.getId());        productListVo.setMainImage(product.getMainImage());        productListVo.setName(product.getName());        productListVo.setPrice(product.getPrice());        productListVo.setStatus(product.getStatus());        productListVo.setSubtitle(product.getSubtitle());        return productListVo;    }    public ServerResponse<ProductDetailVO> detailProductById(Integer productId) {        if (productId == null) {            return ServerResponse.createByErrorCodeMessage(ResponseCode.ILLEGAL_ARGUMENT.getCode(),                ResponseCode.ILLEGAL_ARGUMENT.getDesc());        }        Product product = productMapper.selectByPrimaryKey(productId);        if (product != null) {            ProductDetailVO productDetailVO = assembleProductDetailVo(product);            return ServerResponse.createBySuccess(productDetailVO);        }        return ServerResponse.createByErrorMessage("产品已下架或删除");    }    private ProductDetailVO assembleProductDetailVo(Product product) {        ProductDetailVO productDetailVO = new ProductDetailVO();        productDetailVO.setId(product.getId());        productDetailVO.setCategoryId(product.getCategoryId());        productDetailVO.setMainImage(product.getMainImage());        productDetailVO.setSubImages(product.getSubImages());        productDetailVO.setDetail(product.getDetail());        productDetailVO.setName(product.getName());        productDetailVO.setStatus(product.getStatus());        productDetailVO.setPrice(product.getPrice());        productDetailVO.setSubtitle(product.getSubtitle());        //parentCategoryId        Category category = categoryMapper.selectByPrimaryKey(product.getCategoryId());        if (category == null) {            productDetailVO.setParentCategoryId(0);//默认根节点        } else {            productDetailVO.setParentCategoryId(category.getParentId());        }        //ImageHost        productDetailVO.setImageHost(PropertiesUtil.getProperty("ftp.server.http.prefix",            "http://img.happymmall.com/"));        //createTime        productDetailVO.setCreateTime(DateTimeUtil.dateToStr(product.getCreateTime()));        //updateTiome        productDetailVO.setUpdateTime(DateTimeUtil.dateToStr(product.getUpdateTime()));        return productDetailVO;    }    public ServerResponse<PageInfo> searchProduct(Integer productId, String productName, Integer pageNum,                                                  Integer pageSize) {        PageHelper.startPage(pageNum, pageSize);        if (StringUtils.isNotBlank(productName)) {            productName = new StringBuilder().append("%").append(productName).append("%").toString();        }        List<Product> productList = productMapper.serchListProductByIdAndName(productId, productName);        List<ProductListVo> productListVos = new ArrayList<ProductListVo>();        for (Product productItem : productList) {            ProductListVo productListVo = assembleProductListVo(productItem);            productListVos.add(productListVo);        }        PageInfo pageInfo = new PageInfo(productList);        pageInfo.setList(productListVos);        return ServerResponse.createBySuccess(pageInfo);    }}